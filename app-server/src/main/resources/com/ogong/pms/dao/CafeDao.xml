<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ogong.pms.dao.CafeDao">
  
  <resultMap type="Cafe" id="cafeMap">
    <id column="cafe_no" property="no"/> 
    <result column="name" property="name"/>
    <result column="info" property="info"/>
    <result column="location" property="location"/>
    <result column="phone" property="phone"/>
    <result column="open_time" property="openTime"/>
    <result column="close_time" property="closeTime"/>
    <result column="view_cnt" property="viewCount"/>
    <result column="avgReview" property="avgReview"/>
    <result column="countReview" property="countReview"/>
    <result column="countReview" property="countReview"/>
    <result column="countRoom" property="countRoom"/>
    <result column="operating_status_no" property="cafeStatus"/>
    
    <association property="ceoMember" javaType="CeoMember">
      <id column="member_no" property="ceoNo"/>
      <result column="bossname" property="ceoBossName" />
      <result column="license_no" property="ceoLicenseNo" />
    </association>
    
    <collection property="cafeImgs" ofType="CafeImage">
      <id column="photo_no" property="no" />
      <result column="photo_name" property="name" />
    </collection>
  </resultMap>

  <sql id="listSelect1">
    select 
      c.cafe_no, 
      c.name,
      c.location,
      c.open_time,
      c.close_time,
      c.view_cnt,
      (select
          avg(grade)
			 from studycafe_review srv
			 join studycafe_reservation sr on srv.studycafe_rsv_no=sr.studycafe_rsv_no
			 join studycafe_room srm on sr.studyroom_no=srm.studyroom_no
			 where srv.status=1
			 group by srm.cafe_no
			 having srm.cafe_no=c.cafe_no
			) avgReview,
			(select 
			   count(*)
			 from studycafe_review srv
			 join studycafe_reservation sr on srv.studycafe_rsv_no=sr.studycafe_rsv_no
			 join studycafe_room srm on sr.studyroom_no=srm.studyroom_no
			 where srv.status=1
			 group by srm.cafe_no
			 having srm.cafe_no=c.cafe_no
			) countReview,
			(select 
			   count(*)
			from studycafe_room srm
			where srm.status=1
			group by srm.cafe_no
			having srm.cafe_no=c.cafe_no
			) countRoom,
      c.operating_status_no,
      sp.photo_no,
      sp.name photo_name
    from 
      studycafe c
      left outer join studycafe_photo sp on c.cafe_no = sp.cafe_no
  </sql>
  
  <sql id="detailSelect1">
    select 
      c.cafe_no, 
      c.name, 
      c.info, 
      c.location, 
      c.phone, 
      c.open_time, 
      c.close_time,
      c.view_cnt,
      (select
          avg(grade)
       from studycafe_review srv
       join studycafe_reservation sr on srv.studycafe_rsv_no=sr.studycafe_rsv_no
       join studycafe_room srm on sr.studyroom_no=srm.studyroom_no
       where srv.status=1
       group by srm.cafe_no
       having srm.cafe_no=c.cafe_no
      ) avgReview,
      (select 
         count(*)
       from studycafe_review srv
       join studycafe_reservation sr on srv.studycafe_rsv_no=sr.studycafe_rsv_no
       join studycafe_room srm on sr.studyroom_no=srm.studyroom_no
       where srv.status=1
       group by srm.cafe_no
       having srm.cafe_no=c.cafe_no
      ) countReview,
      sp.photo_no,
      sp.name photo_name, 
      c.operating_status_no, 
      c.member_no,
      cm.bossname, 
      cm.license_no
    from 
      studycafe c
      left outer join studycafe_photo sp on c.cafe_no = sp.cafe_no
      join ceo_member cm on c.member_no=cm.member_no
  </sql>
  
  <sql id="memberWhere">
      c.operating_status_no != 1 
      and c.operating_status_no != 4
  </sql>
  
  <sql id="listOrder1">
    order by 
      c.operating_status_no asc,c.cafe_no asc
  </sql>
  
  <!-- 관리자용 전체리스트 -->
  <select id="getCafeList" resultMap="cafeMap">
    <include refid="listSelect1"/>
    order by c.cafe_no asc
  </select>
  
  <!-- 멤버용 전체리스트 -->
  <select id="getCafeListByMember" resultMap="cafeMap">
    <include refid="listSelect1"/>
    where
     <include refid="memberWhere"/>
    <include refid="listOrder1"/>
  </select>
  
  <!-- 멤버 검색용 리스트 -->
  <select id="findCafeListByLocation" resultMap="cafeMap">
    <include refid="listSelect1"/>
    where 
     <include refid="memberWhere"/>  
     and c.${input} like (concat('%',#{keyword},'%'))
    <include refid="listOrder1"/>
  </select>
  
  <!-- 여기저기서 쓰이는 카페(?) -->
  <select id="findByCafeNo" resultMap="cafeMap">
    <include refid="detailSelect1"/>
    where
      c.cafe_no = #{cafeNo}
  </select>
  
  <!-- 멤버용 카페 상세 -->
  <select id="findByCafeNoMember" resultMap="cafeMap">
    <include refid="detailSelect1"/>
    where
      <include refid="memberWhere"/> 
      and c.cafe_no = #{cafeNo}
  </select>
  
  <!-- 사장용 카페 상세 -->
  <select id="findByCeoMember" resultMap="cafeMap">
    <include refid="detailSelect1"/>
    where
      c.operating_status_no != 4
      and c.member_no = #{ceoNo}
  </select>
  
  <insert id="insertCafe"
          useGeneratedKeys="true" keyColumn="cafe_no" keyProperty="no">
    insert into studycafe
      (name,info,location,phone,open_time,close_time,member_no,operating_status_no)
    values
      (#{name},#{info},#{location},#{phone},#{openTime,jdbcType=TIME},#{closeTime,jdbcType=TIME},#{ceoMember.ceoNo},1)
  </insert>
  
  <insert id="insertCafeImage">
    insert into studycafe_photo(name, cafe_no) 
    values
    <foreach collection="fileNames" item="CafeImage" separator="," >
    (#{CafeImage.name},#{cafeNo})
    </foreach>
  </insert>
  
  <insert id="insertCafeHolidays">
    insert into studycafe_holiday(date, cafe_no) 
    values
    <foreach collection="holidays" item="Date" separator="," >
    (#{Date},#{cafeNo})
    </foreach>
  </insert>
  
  <update id="updateCafe">
    update studycafe
    <set>
      <if test="info != null">
      info=#{info},
      </if>
      <if test="location != null">
      location=#{location},
      </if>
      <if test="phone != null">
      phone=#{phone},
      </if>
      <if test="openTime != null">
      open_time=#{openTime,jdbcType=TIME},
      </if>
      <if test="closeTime != null">
      close_time=#{closeTime,jdbcType=TIME},
      </if>
      <if test="cafeStatus != null">
      operating_status_no=#{cafeStatus}
      </if>
    </set>
    where
      cafe_no=#{no}
  </update>
  
  <update id="updateViewCount">
    update studycafe set
      view_cnt=view_cnt + 1
    where cafe_no=#{cafeNo}
  </update>

  <!-- 관리자 카페 승인  -->
  <update id="updateCafeStatusToGENERAL">
    update studycafe set
       operating_status_no = 2
    where
       cafe_no = #{cafeNo}
  </update>
  
  <delete id="deleteCafe">
    update studycafe set
       operating_status_no = 4
    where
       cafe_no = #{cafeNo}
  </delete>
  
  <delete id="deleteCafeImage">
    delete from studycafe_photo
    <where>
      photo_no in
      <foreach collection="fileNames" item="CafeImage" separator=","  open="(" close=")">
        #{CafeImage.no}
      </foreach>
    </where>
  </delete>
  
  <!-- 금주의 휴무일 가져오기 -->
  <select id="getCafeHoliday" resultType="string">
    select 
      group_concat(date separator ',') holiday
    from 
      studycafe_holiday
    where 
      weekofyear(curdate())=weekofyear(date)
      <if test="cafeNo != null">
        and cafe_no=#{cafeNo}
      </if>
      <if test="ceoNo != null">
        and cafe_no = 
        (select cafe_no from studycafe where member_no=#{ceoNo} and operating_status_no != 4)
      </if>
  </select>
</mapper>







