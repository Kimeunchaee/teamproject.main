<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ogong.pms.dao.StudyDao">
   
   <resultMap type="Study" id="StudyMap">
    <id column="study_no" property="studyNo"/> 
    <result column="study_title" property="studyTitle"/>
    <result column="subject_no" property="subjectNo"/>
    <result column="subject_name" property="subjectName"/>
    <result column="area" property="area"/>
    <result column="no_people" property="numberOfPeple"/>
    <result column="face_no" property="faceNo"/>
    <result column="face_name" property="faceName"/>
    <result column="introduction" property="introduction"/>
    <result column="created_dt" property="registeredDate"/>
    <result column="study_score" property="score"/>
    <result column="count_guilder" property="countMember"/>
    <result column="count_wating_guilder" property="watingCountMember"/>
    <result column="count_bookmark" property="countBookMember"/>
    
    <association property="owner" javaType="Member">
    <id column="owner_no" property="perNo"/>
    <result column="owner_name" property="perNickname"/>
    </association>
    
  </resultMap>
  
<resultMap type="Member" id="MemberMap">
    <id column="member_no" property="perNo"/>
    <result column="member_name" property="perName"/>
    <result column="member_nickname" property="perNickname"/>
  </resultMap>


<!--  ===[스터디 출력 중복]=== -->
  <sql id="select1">
  select
     s.study_no,
     s.name study_title,
     ss.subject_no subject_no,
     ss.name subject_name,
     s.area,
     s.no_people,
     sfs.face_no face_no,
     sfs.name face_name,
     s.introduction,
     s.created_dt,
     s.score study_score,
     s.member_no owner_no,
     m.nickname owner_name,
    (select count(*) from study_guilder where study_no=s.study_no and status=2) count_guilder,
    (select count(*) from study_guilder where study_no=s.study_no and status=1) count_wating_guilder,
    (select count(*) from study_bookmark where study_no=s.study_no) count_bookmark
   from study s
     left outer join study_subject ss on s.subject_no=ss.subject_no
     left outer join study_face_status sfs on s.face_no=sfs.face_no
     left outer join member m on s.member_no=m.member_no
     left outer join study_guilder sg on s.study_no=sg.study_no
     left outer join member m2 on sg.member_no=m2.member_no
     left outer join study_bookmark sb on s.study_no=sb.study_no
  </sql>
  
  <!--  ===[구성원 출력 중복]=== -->
  <sql id="select2">
   select
      sg.member_no,
      m.name member_name,
      m.nickname member_nickname
    from
      study_guilder sg
    join
      member m on m.member_no=sg.member_no
  </sql>

<!--  ===========================[스터디]=========================== -->
 
  <!--  ===[스터디 등록]=== -->
  <insert id="insert" parameterType="Study"
   useGeneratedKeys="true" keyColumn="study_no" keyProperty="studyNo">
  insert into study
     (name, subject_no, no_people, face_no, introduction, area, member_no)
     values
     (#{studyTitle}, #{subjectNo}, #{numberOfPeple}, #{faceNo}, #{introduction}, #{area}, #{owner.perNo})
  </insert>
  
  <!--  ===[스터디 수정]=== -->
  <update id="update" parameterType="Study">
  update study set
    name=#{studyTitle},no_people=#{numberOfPeple},face_no=#{faceNo},introduction=#{introduction}
   where
    study_no=#{studyNo}
  </update>
  
  <!--  ===[스터디 삭제(북마크)]=== -->
  <delete id="deleteAllBookmark" parameterType="int">
  delete from study_bookmark
    where study_no=#{studyNo}
  </delete>
  
  <!--  ===[스터디 삭제]=== -->
  <delete id="deleteStudy" parameterType="map">
  delete from study
    where study_no=#{studyNo} and member_no=#{memberNo}
  </delete>
  
  <!--  ===[스터디 검색]=== -->
  <select id="findByKeyword" resultMap="StudyMap" parameterType="string">
   <include refid="select1"/>
   where s.name like(concat('%',#{keyword},'%'))
     or ss.name like (concat('%',#{keyword},'%'))
     or s.area like (concat('%',#{keyword},'%'))
    group by s.study_no
    order by s.study_no
  </select>
  
  <!--  ===[전체 스터디 목록]=== -->
  <select id="findAll" resultMap="StudyMap">
    <include refid="select1"/>
      group by s.study_no
      order by s.study_no
  </select>

 <!--  ===[스터디 상세]=== -->
  <select id="findByNo" resultMap="StudyMap" parameterType="int">
    <include refid="select1"/>
     where
       s.study_no=#{studyNo}
  </select>
  
  <!--  ===[내스터디 상세]=== -->
  <select id="findByMyNo" resultMap="StudyMap" parameterType="map"> 
    <include refid="select1"/>
    where
      s.study_no=#{studyNo} and (s.member_no=#{memberNo} or sg.member_no=#{memberNo})
  </select>

   <!--  ===========================[구성원]=========================== -->
   
   <select id="findByWaitingGuilderAll" resultMap="MemberMap" parameterType="int">
    <include refid="select2"/>
    where 
      sg.study_no=#{studyNo} and sg.status=1
   </select>
  
   <select id="findByGuildersAll" resultMap="MemberMap" parameterType="int">
    <include refid="select2"/>
    where 
      sg.study_no=#{studyNo} and sg.status=2
   </select>
   
  <!--  ===[신청하기(joinHandler)]=== -->
  <insert id="insertGuilder" parameterType="map">
    insert into study_guilder(study_no, member_no) 
    values(#{studyNo},#{memberNo})
  </insert>

 <!--  ===[조장권한 위임]=== -->
  <update id="updateOwner" parameterType="map">
  update study set
   member_no=#{memberNo}
  where
   study_no=#{studyNo}
  </update>

<!--  ===[승인대기중인 구성원 승인하기]=== -->
  <update id="updateGuilder" parameterType="map">
  update study_guilder set 
   status=2
  where
   study_no=#{studyNo} and member_no=#{memberNo}
  </update>
  
<!--  ===[구성원에서 삭제하기]=== -->
  <delete id="deleteGuilder" parameterType="map"> 
  delete from study_guilder
  where 
   study_no=#{studyNo} and member_no=#{memberNo}
  </delete>

<!--  ===[구성원 전체 삭제하기]=== -->
  <delete id="deleteAllGuilder" parameterType="int"> 
  delete from study_guilder 
  where
   study_no=#{studyNo}
  </delete>

<!--  ===========================[북마크]=========================== -->

<!--  ===[북마크 하기]=== -->
  <insert id="insertBookmark">
  insert into study_bookmark(study_no, member_no)
   values(#{studyNo},#{memberNo})
  </insert>

<!--  ===[북마크 취소하기]=== -->
   <delete id="deleteBookmark" parameterType="map">
     delete from study_bookmark
      where
       study_no=#{studyNo} and member_no=#{memberNo}
   </delete>
   
   
   <select id="findByBookmarkAll" resultMap="MemberMap" parameterType="int">
    select
      sbm.member_no,
      m.name member_name,
      m.nickname member_nickname
    from
      study_bookmark sbm
    join
      member m on m.member_no=sbm.member_no
    where 
      sbm.study_no=#{studyNo}
   </select>
   
   <select id="findByMyBookmark" resultMap="StudyMap" parameterType="int">
   select
     sbm.study_no,
     s.study_no,
     s.name study_title,
     ss.subject_no subject_no,
     ss.name subject_name,
     s.area,
     s.no_people,
     sfs.face_no face_no,
     sfs.name face_name,
     s.introduction,
     s.created_dt,
     s.score study_score,
     s.member_no owner_no,
     m.nickname owner_name,
     m2.member_no member_no,
     m2.name member_name,
     m2.nickname member_nickname,
    (select count(*) from study_guilder where study_no=s.study_no and status=2) count_guilder,
    (select count(*) from study_bookmark where study_no=s.study_no) count_bookmark
   from study_bookmark sbm
      left outer join study s on s.study_no=sbm.study_no
      left outer join member m on m.member_no=s.member_no
      left outer join member m2 on m2.member_no=sbm.member_no
      left outer join study_subject ss on s.subject_no=ss.subject_no
      left outer join study_face_status sfs on s.face_no=sfs.face_no
    where 
      sbm.member_no=#{memberNo}    
   </select>
   
   <select id="findByBookmark" resultMap="StudyMap" parameterType="int">
    select
     sbm.study_no,
     s.study_no,
     s.name study_title,
     ss.subject_no subject_no,
     ss.name subject_name,
     s.area,
     s.no_people,
     sfs.face_no face_no,
     sfs.name face_name,
     s.introduction,
     s.created_dt,
     s.score study_score,
     s.member_no owner_no,
     m.nickname owner_name,
     m2.member_no member_no,
     m2.name member_name,
     m2.nickname member_nickname,
    (select count(*) from study_guilder where study_no=s.study_no and status=2) count_guilder,
    (select count(*) from study_bookmark where study_no=s.study_no) count_bookmark
   from study_bookmark sbm
      left outer join study s on s.study_no=sbm.study_no
      left outer join member m on m.member_no=s.member_no
      left outer join member m2 on m2.member_no=sbm.member_no
      left outer join study_subject ss on s.subject_no=ss.subject_no
      left outer join study_face_status sfs on s.face_no=sfs.face_no
    where 
      sbm.member_no=#{memberNo} and sbm.study_no=#{studyNo}
   </select>

</mapper>







